{"version":3,"sources":["webpack:///./src/templates/post.js","webpack:///./src/components/useAuthors.js","webpack:///./src/components/authors.js"],"names":["Post","props","authors","useAuthors","page","data","markdownRemark","formOptions","actions","DeleteAction","fields","label","name","component","parse","filename","uploadDir","previewSrc","formValues","frontmatter","hero","image","childImageSharp","fluid","src","useLocalRemarkForm","form","date","length","authorIDs","to","format","dangerouslySetInnerHTML","__html","html","draft","process","postQuery","settingsJson","ListAuthors","filter","author","find","id","map","index","AuthorsForm","itemProps","item","key","defaultItem","Math","random","toString","substr","email","link","value"],"mappings":"4mBAuGeA,UAlFf,SAAcC,GACZ,IAAMC,EAAUC,cACVC,EAAOH,EAAMI,KAAKC,eAClBC,EAAc,CAClBC,QAAS,CAACC,gBACVC,OAAQ,CACN,CACEC,MAAO,QACPC,KAAM,uBACNC,UAAW,QAEb,CACEF,MAAO,UACPC,KAAM,yBACNC,UAAW,UACXX,QAASA,GAEX,CACEU,KAAM,uBACNC,UAAW,SACXF,MAAO,SAET,CACEA,MAAO,OACPC,KAAM,sBACNC,UAAW,QAEb,CACEF,MAAO,aACPC,KAAM,4BACNC,UAAW,QACXC,MAAO,SAACC,GAAD,mBAA2BA,GAClCC,UAAW,qCACXC,WAAY,SAACC,GACX,OACGA,EAAWC,YAAYC,MACvBF,EAAWC,YAAYC,KAAKC,MAGxBH,EAAWC,YAAYC,KAAKC,MAAMC,gBAAgBC,MAAMC,IADtD,OAtCE,EA6CEC,6BAAmBrB,EAAMG,GAAvCF,EA7CY,KA6CNqB,EA7CM,KA+CnB,OACE,kBAAC,IAAD,CAAYA,KAAMA,GAChB,kBAAC,IAAD,CAAYtB,KAAMC,GAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KAAWA,EAAKc,YAAYQ,MAC3BtB,EAAKc,YAAYjB,SAAWG,EAAKc,YAAYjB,QAAQ0B,OAAS,GAC7D,kBAAC,IAAD,KACE,kCADF,IAEE,kBAAC,IAAD,CAAaC,UAAWxB,EAAKc,YAAYjB,WAG7C,kBAAC,IAAD,KACE,kBAAC,OAAD,CAAM4B,GAAG,SAAT,oBAGJ,4BACE,kBAAC,IAAD,CAAiBlB,KAAK,0BAExB,6BACA,kBAAC,IAAD,CAAeA,KAAK,kBAAkBmB,OAAO,YAC3C,yBACEC,wBAAyB,CACvBC,OAAQ5B,EAAK6B,SAIlB7B,EAAKc,YAAYgB,OAAS,kBAAC,IAAD,eAC1BC,MAOIpC,IAEFqC,EAAS,a,oFCvGTlC,EAAa,WAaxB,OAb8B,OACtBmC,aAYYpC,U,8JCbTqC,EAAc,SAAC,GAAmB,IAAjBV,EAAgB,EAAhBA,UACtB3B,EAAUC,cAAaqC,QAAO,SAAAC,GAAM,OACxCZ,EAAUa,MAAK,SAAAC,GAAE,OAAIA,IAAOF,EAAOE,SAWrC,OARmBzC,EAAQ0C,KAAI,SAACH,EAAQI,GACtC,OAAI3C,EAAQ0B,SAAWiB,EAAQ,EACtBJ,EAAO7B,KAEP6B,EAAO7B,KAAO,SAOdkC,EAAc,CACzBnC,MAAO,UACPD,OAAQ,CACN,CACEC,MAAO,UACPC,KAAM,kBACNC,UAAW,aACXkC,UAAW,SAAAC,GAAI,MAAK,CAClBC,IAAKD,EAAKL,GACVhC,MAAOqC,EAAKpC,OAEdsC,YAAa,iBAAO,CAClBtC,KAAM,aACN+B,GAAIQ,KAAKC,SACNC,SAAS,IACTC,OAAO,EAAG,GACbC,MAAO,GACPC,KAAM,KAER9C,OAAQ,CACN,CACEC,MAAO,OACPC,KAAM,OACNC,UAAW,OACXC,MAJF,SAIQ2C,GACJ,OAAOA,GAAS,KAGpB,CACE9C,MAAO,QACPC,KAAM,QACNC,UAAW,OACXC,MAJF,SAIQ2C,GACJ,OAAOA,GAAS,KAGpB,CACE9C,MAAO,OACPC,KAAM,OACNC,UAAW,OACXC,MAJF,SAIQ2C,GACJ,OAAOA,GAAS","file":"component---src-templates-post-js-548b5475f106f366a7f5.js","sourcesContent":["import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport {\n  Paper,\n  Meta,\n  MetaSpan,\n  MetaActions,\n  DraftBadge,\n} from \"../components/style\"\nimport { EditToggle } from \"../components/editToggle\"\nimport { ListAuthors } from \"../components/authors\"\nimport { Link } from \"gatsby\"\nimport { PageLayout } from \"../components/pageLayout\"\nimport { useLocalRemarkForm, DeleteAction } from \"gatsby-tinacms-remark\"\nimport {\n  InlineForm,\n  InlineTextField,\n  InlineWysiwyg,\n} from \"react-tinacms-inline\"\nimport { useAuthors } from \"../components/useAuthors\"\n\nfunction Post(props) {\n  const authors = useAuthors()\n  const page = props.data.markdownRemark\n  const formOptions = {\n    actions: [DeleteAction],\n    fields: [\n      {\n        label: \"Title\",\n        name: \"rawFrontmatter.title\",\n        component: \"text\",\n      },\n      {\n        label: \"Authors\",\n        name: \"rawFrontmatter.authors\",\n        component: \"authors\",\n        authors: authors,\n      },\n      {\n        name: \"rawFrontmatter.draft\",\n        component: \"toggle\",\n        label: \"Draft\",\n      },\n      {\n        label: \"Date\",\n        name: \"rawFrontmatter.date\",\n        component: \"date\",\n      },\n      {\n        label: \"Hero Image\",\n        name: \"rawFrontmatter.hero.image\",\n        component: \"image\",\n        parse: (filename) => `../images/${filename}`,\n        uploadDir: () => `/content/images/`,\n        previewSrc: (formValues) => {\n          if (\n            !formValues.frontmatter.hero ||\n            !formValues.frontmatter.hero.image\n          )\n            return \"\"\n          return formValues.frontmatter.hero.image.childImageSharp.fluid.src\n        },\n      },\n    ],\n  }\n\n  const [data, form] = useLocalRemarkForm(page, formOptions)\n\n  return (\n    <InlineForm form={form}>\n      <PageLayout page={data}>\n        <Paper>\n          <Meta>\n            <MetaSpan>{data.frontmatter.date}</MetaSpan>\n            {data.frontmatter.authors && data.frontmatter.authors.length > 0 && (\n              <MetaSpan>\n                <em>By</em>&nbsp;\n                <ListAuthors authorIDs={data.frontmatter.authors} />\n              </MetaSpan>\n            )}\n            <MetaActions>\n              <Link to=\"/blog\">‚Üê Back to Blog</Link>\n            </MetaActions>\n          </Meta>\n          <h1>\n            <InlineTextField name=\"rawFrontmatter.title\" />\n          </h1>\n          <hr />\n          <InlineWysiwyg name=\"rawMarkdownBody\" format=\"markdown\">\n            <div\n              dangerouslySetInnerHTML={{\n                __html: data.html,\n              }}\n            />\n          </InlineWysiwyg>\n          {data.frontmatter.draft && <DraftBadge>Draft</DraftBadge>}\n          {process.env.NODE_ENV !== \"production\" && <EditToggle />}\n        </Paper>\n      </PageLayout>\n    </InlineForm>\n  )\n}\n\nexport default Post\n\nexport const postQuery = graphql`\n  query($path: String!) {\n    markdownRemark(\n      published: { eq: true }\n      frontmatter: { path: { eq: $path } }\n    ) {\n      id\n      excerpt(pruneLength: 160)\n      html\n\n      frontmatter {\n        path\n        date(formatString: \"MMMM DD, YYYY\")\n        title\n        draft\n        authors\n        hero {\n          large\n          overlay\n          image {\n            childImageSharp {\n              fluid(quality: 70, maxWidth: 1920) {\n                ...GatsbyImageSharpFluid_withWebp\n              }\n            }\n          }\n        }\n      }\n\n      fileRelativePath\n      rawFrontmatter\n      rawMarkdownBody\n    }\n    settingsJson(fileRelativePath: { eq: \"/content/settings/authors.json\" }) {\n      ...authors\n    }\n  }\n`\n","import { useStaticQuery, graphql } from \"gatsby\"\n\nexport const useAuthors = () => {\n  const { settingsJson } = useStaticQuery(\n    graphql`\n      query authorsQuery {\n        settingsJson(\n          fileRelativePath: { eq: \"/content/settings/authors.json\" }\n        ) {\n          ...authors\n        }\n      }\n    `\n  )\n\n  return settingsJson.authors\n}\n\nexport const authorsFragment = graphql`\n  fragment authors on SettingsJson {\n    authors {\n      email\n      name\n      id\n      link\n    }\n  }\n`\n","import { useAuthors } from \"./useAuthors\"\n\nexport const ListAuthors = ({ authorIDs }) => {\n  const authors = useAuthors().filter(author =>\n    authorIDs.find(id => id === author.id)\n  )\n\n  const authorList = authors.map((author, index) => {\n    if (authors.length === index + 1) {\n      return author.name\n    } else {\n      return author.name + \", \"\n    }\n  })\n\n  return authorList\n}\n\nexport const AuthorsForm = {\n  label: \"Authors\",\n  fields: [\n    {\n      label: \"Authors\",\n      name: \"rawJson.authors\",\n      component: \"group-list\",\n      itemProps: item => ({\n        key: item.id,\n        label: item.name,\n      }),\n      defaultItem: () => ({\n        name: \"New Author\",\n        id: Math.random()\n          .toString(36)\n          .substr(2, 9),\n        email: \"\",\n        link: \"\",\n      }),\n      fields: [\n        {\n          label: \"Name\",\n          name: \"name\",\n          component: \"text\",\n          parse(value) {\n            return value || \"\"\n          },\n        },\n        {\n          label: \"Email\",\n          name: \"email\",\n          component: \"text\",\n          parse(value) {\n            return value || \"\"\n          },\n        },\n        {\n          label: \"Link\",\n          name: \"link\",\n          component: \"text\",\n          parse(value) {\n            return value || \"\"\n          },\n        },\n      ],\n    },\n  ],\n}\n"],"sourceRoot":""}